#!/bin/bash
#

##############################################################################
# USER CONFIGURATION OPTIONS
# the intel video card and/or thinkpad display goes off if this is <= 30
DEFAULT_MIN_BRIGHTNESS=35

# apple support curently not working
USE_APPLE_EXT_DISPLAY="${USE_APPLE_EXT_DISPLAY:-N}"
##############################################################################
# Reference
# see xbacklight as alternative

me=$(basename $0)
if [ "$1" = "-v" -o "$1" = "--verbose" ] ; then
  VERBOSE=1
  shift
else
  VERBOSE=0
fi


function _vecho() { if [ "${VERBOSE}" = 1 ] ; then echo $* ; fi ; }

function show_help() {
  echo "$me <up|down|max|min|set <N>|off>"
}


function find_defaultdisplay() {
  # TODO: determine this
  echo ""
}

function find_backlightctldir() {
  find /sys/class/backlight -maxdepth 1 -type l -name \*backlight\* | tail -n 1
}

## Laptop display settings
backlightctldir=$(find_backlightctldir)

if [ -z "$backlightctldir" ] ; then
  echo "Could not find backlight control directory under /sys/class/backlight!"
  exit 1
fi

brightness_ctl_file="$backlightctldir/brightness"
actualbrightness_ctl_file="$backlightctldir/actual_brightness"
maxbrightness_ctl_file="$backlightctldir/max_brightness"

# find_defaultdisplay

# TODO: don't do this if we are on an external display
currentbrightness="$(cat ${actualbrightness_ctl_file})"
maxbrightness="$(cat ${maxbrightness_ctl_file})"
bright10percent=$((${maxbrightness}/10))



if [ "$1" = "-fixperms" ] ; then
  sudo chown :power ${brightness_ctl_file}
  sudo chmod 664 ${brightness_ctl_file}
  exit 0
fi

if [ ! -w "${brightness_ctl_file}" ] ; then
  echo "No access to $brightness_ctl_file"
  echo -e "Please run:\n\tsudo chown :power ${brightness_ctl_file} \n\tsudo chmod 664 ${brightness_ctl_file}"
  exit 1
fi

# TODO: make it support multiple thingies...
## for Mac monitor
# sudo acdcontrol -d  /dev/usb/hiddev*
# acdcontrol ....


hiddev=""

function find_hiddev() {
  if [ -n "$(which acdcontrol)" ] ; then
    for hid in /dev/usb/hiddev* ; do
      acdcontrol --detect $hid |grep -q SUPPORTED
      if [ "$?" = 0 ] ; then
        hiddev=$hid
      fi
    done
  else
    echo "Install acdcontrol"
    exit 1
  fi
}

function change_brightness_acd() {
  if [ "$USE_APPLE_EXT_DISPLAY" = "Y" ] ; then
    find_hiddev

    if [ -z "$hiddev" ] ; then
      echo "no dev found"
      exit 0
    fi

    amount="$1"

    if [ -z "$amount" ] ; then
      amount=150
    fi

    cmd="$2"

    case $cmd in
      up)
        PREFIX="+"
        ;;
      down)
        PREFIX="-"
        ;;
      *)
        PREFIX=""
    esac

    acdcontrol -s $hiddev -- ${PREFIX}${amount}
  else
    echo "we should not be in apple land"
  fi
}

function change_brightness() {
  if [ "$USE_APPLE_EXT_DISPLAY" = "Y" ] ; then
    _vecho "acd"
    change_brightness_acd $1 $2
  else
    _vecho "echo $1 > $brightness_ctl_file"
    echo $1 > $brightness_ctl_file
  fi
}

### Command parsing etc

case $me in
brighten|brighter)
  cmd="up"
  ;;
dimmer|dimmit)
  cmd="down"
  ;;
maxbrightness)
  cmd="max"
  ;;
maxdimmness)
  cmd="min"
  ;;
setbrightness)
  if [[ "$1" == +([0-9]*) ]] ; then
    cmd="set"
    cmdarg="$1"
    shift
  else
    show_help
    exit 1
  fi
  ;;
*)
  cmd="show"
  ;;
esac

case $1 in
  -appleext|-extapple|-ae|-ea)
    USE_APPLE_EXT_DISPLAY=Y
    shift
    ;;
esac


if [ "$USE_APPLE_EXT_DISPLAY" = "Y" ] ; then
  DEFAULT_MIN_BRIGHTNESS=10
  maxbrightness=1000
  minbrightness=10
fi

# TODO: merge these two cases statements maybe...
case $1 in
up|more|brighter)
  cmd="up"
  ;;
down|dimmer|dimmit)
  cmd="down"
  ;;
max)
  cmd="max"
  ;;
min)
  cmd="min"
  ;;
help|-h)
  cmd="help"
  ;;
off)
  cmd="off"
  ;;
*)
  if [[ "$1" == +([0-9]*) ]] ; then
    cmd="set"
    cmdarg="$1"
    shift
  elif [ -z "$cmd"  ] ; then
    cmd="show"
  fi
  ;;
esac

if [ "$cmd" = "up" ] ; then
  newbrightness="$(($currentbrightness+$bright10percent))"
elif [ "$cmd" = "down" ] ; then
  newbrightness="$(($currentbrightness-$bright10percent))"
elif [ "$cmd" = "max" ] ; then
  newbrightness="$maxbrightness"
elif [ "$cmd" = "min" ] ; then
  newbrightness="$DEFAULT_MIN_BRIGHTNESS"
elif [ "$cmd" = "set" ] ; then
  newbrightness="$cmdarg"
elif [ "$cmd" = "off" ] ; then
  #newbrightness="0"
  sleep 1
  xset dpms force off
  exit 0
elif [ "$cmd" = "help" ] ; then
  show_help
  exit 0
else
  echo "current brightness: $currentbrightness"
  exit 0
fi

if (( $newbrightness > $maxbrightness )) ; then
  _vecho "too high, nb: $newbrightness, cb: $currentbrightness, mb: $maxbrightness"
  newbrightness=$maxbrightness
elif (( $newbrightness < $DEFAULT_MIN_BRIGHTNESS )) ; then
  _vecho "too low"
  newbrightness=$DEFAULT_MIN_BRIGHTNESS
fi

_vecho "Changing brightness from $currentbrightness to $newbrightness"

change_brightness $newbrightness $cmd
